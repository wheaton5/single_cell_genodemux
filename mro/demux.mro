@include "_demux_stages.mro"

pipeline CLUSTER_GENOTYPES_PIPE(
    in vcf.gz[] vcfs,
    in int ploidy,
    in int ref_alleles_required,
    in int alt_alleles_required,
    in csv reads_per_cell,
    in string ground_truth,
    in int downsample_graph,
    in string fasta,
    in bam bam,
    in csv transcript_clusters,
    in int qual_filter,
    in int num_clusters,
    in int min_clusters,
    in int max_clusters,
    out map metrics,
    out json metrics_json,
    out dot graph,
    out tsv.gz calls,
    out mcl clusters,
    out png concordance_bargraph,
    out png concordance_heatmap,
    out png pca_vs_clusters,
    out csv pca_vs_clusters_data,
    out csv concordance,
)
{
    call CLUSTER_GENOTYPES(
        vcfs = self.vcfs,
        ploidy = self.ploidy,  
        bam = self.bam,
        ref_alleles_required = self.ref_alleles_required,
        alt_alleles_required = self.alt_alleles_required,
        reads_per_cell = self.reads_per_cell,
        ground_truth = self.ground_truth,
        downsample_graph = self.downsample_graph,
        transcript_clusters = self.transcript_clusters,
        fasta = self.fasta,
        qual_filter = self.qual_filter,
        num_clusters = self.num_clusters,
        min_clusters = self.min_clusters,
        max_clusters = self.max_clusters,
    )

    return (
        metrics = CLUSTER_GENOTYPES.metrics,
        metrics_json = CLUSTER_GENOTYPES.metrics_json,
        graph = CLUSTER_GENOTYPES.graph,
        calls = CLUSTER_GENOTYPES.calls,
        clusters = CLUSTER_GENOTYPES.clusters,
        concordance_bargraph = CLUSTER_GENOTYPES.concordance_bargraph,
        concordance_heatmap = CLUSTER_GENOTYPES.concordance_heatmap,
        concordance = CLUSTER_GENOTYPES.concordance,
        pca_vs_clusters = CLUSTER_GENOTYPES.pca_vs_clusters,
        pca_vs_clusters_data = CLUSTER_GENOTYPES.pca_vs_clusters_data,
    )
}


pipeline CALL_PIPE(
    in bam bam,
    in int ploidy,
    in string fasta,
    in gtf gtf,
    
){
    call CALL_VARIANTS(
        bam = self.bam,
        ploidy = self.ploidy,
        fasta = self.fasta,
        gtf = self.gtf,
        input_variants = null,
        call_exome_only = true,
        call_near_exon_window = 200,
        min_mapq = 50,
    )

    return ()

}

pipeline CALL_AND_CLUSTER(
    in bam bam,
    in string fasta,
    in string[] comparison_bam_files,
    in string[] comparison_bam_names,
    in int ploidy,
    in gtf gtf,
    in int alt_alleles_required,
    in int ref_alleles_required,
    in string input_variants,
    in csv reads_per_cell,
    in string cells_ground_truth,
    in vcf.gz variants_ground_truth,
    in int downsample_graph,
    in csv transcript_clusters,
    in int qual_filter,
    in bool call_exome_only,
    in int call_near_exon_window,
    in int min_mapq,
    in int num_clusters,
    in int min_clusters,
    in int max_clusters,
    out tsv.gz calls,
    out vcf.gz sc_variants,
    out mcl clusters,
    out png concordance_bargraph,
    out png concordance_heatmap,
    out csv concordance,
    out png pca_vs_clusters,
    out csv pca_vs_clusters_data,
)
{
    call CALL_VARIANTS(
        bam = self.bam,
        ploidy = self.ploidy,
        fasta = self.fasta,
        gtf = self.gtf,
        input_variants = self.input_variants,
        call_exome_only = self.call_exome_only,
        call_near_exon_window = self.call_near_exon_window,
        min_mapq = self.min_mapq,
    )

    call CLUSTER_GENOTYPES(
        vcfs = CALL_VARIANTS.vcfs,
        ploidy = self.ploidy,
        alt_alleles_required = self.alt_alleles_required,
        ref_alleles_required = self.ref_alleles_required,
        fasta = self.fasta,
        bam = self.bam,
        reads_per_cell = self.reads_per_cell,
        ground_truth = self.cells_ground_truth,
        downsample_graph = self.downsample_graph,
        transcript_clusters = self.transcript_clusters,
        qual_filter = self.qual_filter,
        num_clusters = self.num_clusters,
        min_clusters = self.min_clusters,
        max_clusters = self.max_clusters,
    )
    
    call ANALYZE_SC_VARIANTS(
        fasta = self.fasta,
        gtf = self.gtf,
        near_exon_window = 200,
        sc_bam = self.bam,
        sc_calls = CLUSTER_GENOTYPES.calls,
        bam_files = self.comparison_bam_files,
        bam_names = self.comparison_bam_names,
        ground_truth = self.variants_ground_truth,
    )

    return (
        calls = CLUSTER_GENOTYPES.calls,
        sc_variants = CALL_VARIANTS.vcf,
        clusters = CLUSTER_GENOTYPES.clusters,
        concordance_bargraph = CLUSTER_GENOTYPES.concordance_bargraph,
        concordance_heatmap = CLUSTER_GENOTYPES.concordance_heatmap,
        concordance = CLUSTER_GENOTYPES.concordance,
        pca_vs_clusters = CLUSTER_GENOTYPES.pca_vs_clusters,
        pca_vs_clusters_data = CLUSTER_GENOTYPES.pca_vs_clusters_data,
    )
}




pipeline REALIGN_PIPE(
    in bam bam,
    in fasta fasta,
    in csv cells,
){
     call REALIGN(
        bam = self.bam,
        max_intron_length = 2000,
        fasta = self.fasta,
        cells = self.cells,
    )
    return()
}

pipeline CELL_MUX_BWA(
    in bam bam,
    in string fasta,
    in csv cells,
    in int ploidy,
    in gtf gtf,
    in int max_intron_length,
    in int alt_alleles_required,
    in int ref_alleles_required,
    in string ground_truth,
    in string input_variants,
    in vcf.gz variants_ground_truth,
    in string[] comparison_bam_files,
    in string[] comparison_bam_names,
    in int downsample_graph,
    in csv transcript_clusters,
    in int qual_filter,
    in bool call_exome_only,
    in int call_near_exon_window,
    in int min_mapq,
    in int num_clusters,
    in int min_clusters,
    in int max_clusters,
    out tsv.gz calls,
    out mcl clusters,
    out vcf.gz sc_variants,
    out png concordance_bargraph,
    out png concordance_heatmap,
    out csv concordance,
    out csv pca_vs_clusters_data,
    out png pca_vs_clusters,
)
{

    call REALIGN(
        bam = self.bam,
        max_intron_length = self.max_intron_length,
        fasta = self.fasta,
        cells = self.cells,
    )

    call CALL_AND_CLUSTER(
        fasta = self.fasta,
        ploidy = self.ploidy,
        gtf = self.gtf,
        bam = REALIGN.bam,
        reads_per_cell = REALIGN.reads_per_cell,
        alt_alleles_required = self.alt_alleles_required,
        ref_alleles_required = self.ref_alleles_required,
        cells_ground_truth = self.ground_truth,
        variants_ground_truth = self.variants_ground_truth,
        comparison_bam_files = self.comparison_bam_files,
        comparison_bam_names = self.comparison_bam_names,
        input_variants = self.input_variants,
        downsample_graph = self.downsample_graph,
        transcript_clusters = self.transcript_clusters,
        qual_filter = self.qual_filter,
        call_exome_only = self.call_exome_only,
        call_near_exon_window = self.call_near_exon_window,
        min_mapq = self.min_mapq,
        num_clusters = self.num_clusters,
        min_clusters = self.min_clusters,
        max_clusters = self.max_clusters,
    )

    return (
        calls = CALL_AND_CLUSTER.calls,
        sc_variants = CALL_AND_CLUSTER.sc_variants,
        clusters = CALL_AND_CLUSTER.clusters,
        concordance_bargraph = CALL_AND_CLUSTER.concordance_bargraph,
        concordance_heatmap = CALL_AND_CLUSTER.concordance_heatmap,
        concordance = CALL_AND_CLUSTER.concordance,
        pca_vs_clusters_data = CALL_AND_CLUSTER.pca_vs_clusters_data,
        pca_vs_clusters = CALL_AND_CLUSTER.pca_vs_clusters,
    )
}

