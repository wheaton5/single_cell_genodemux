filetype png;
filetype bam;
filetype dot;
filetype tsv;
filetype bed;
filetype bed.gz;
filetype txt;
filetype json;
filetype fa;
filetype vcf.gz;
filetype fasta;
filetype csv;
filetype gtf;
filetype sam;

stage REALIGN(
    in bam bam,
    in string fasta,
    in csv cells,
    out bam bam,
    out csv read_groups,
    out csv reads_per_cell,
    src py "stages/realign",
) split using (
    in string chrom,
    in int start,
    in int end,
)

stage REFORMAT_BAM(
    in bam bam,
    in string fasta,
    in csv cells,
    out csv reads_per_cell,
    out sam header,
    out csv read_groups,
    out bam bam,
    out int no_cell_barcode,
    out int no_cell_call,
    out int unmapped,
    out int mapped,
    out int reads_total,
    src py "stages/cell_read_group",
) split using (
    in string chrom,
    in int start,
    in int end,
)

stage SPLIT_N_READS(
    in bam[] bams,
    in string fasta,
    in sam header,
    out bam bam,
    out csv reads_per_cell,
    src py "stages/split_n_reads",
) split using (
    in bam bam,
)

stage CALL_VARIANTS(
    in bam bam,
    in string fasta,
    in int ploidy,
    in gtf gtf,
    in string input_variants,
    out vcf.gz vcf,
    out vcf.gz[] vcfs,
    out bed bed,
    src py "stages/call_variants",
) split using (
    in string chrom,
    in int start,
    in int end,
)

stage CLUSTER_GENOTYPES(
    in vcf.gz[] vcfs,
    in int ploidy,
    in int ref_alleles_required,
    in int alt_alleles_required,
    in csv reads_per_cell,
    in string ground_truth,
    in int downsample_graph,
    in csv transcript_clusters,
    out map metrics,
    out json metrics_json,
    out dot graph,
    out tsv calls,
    src py "stages/cluster_genotypes",
) split using (
    in vcf.gz vcf,
)

pipeline CLUSTER_GENOTYPES_PIPE(
    in vcf.gz[] vcfs,
    in int ploidy,
    in int ref_alleles_required,
    in int alt_alleles_required,
    in csv reads_per_cell,
    in string ground_truth,
    in int downsample_graph,
    in csv transcript_clusters,
    out map metrics,
    out json metrics_json,
    out dot graph,
    out tsv calls,
)
{
    call CLUSTER_GENOTYPES(
        vcfs = self.vcfs,
        ploidy = self.ploidy,  
        ref_alleles_required = self.ref_alleles_required,
        alt_alleles_required = self.alt_alleles_required,
        reads_per_cell = self.reads_per_cell,
        ground_truth = self.ground_truth,
        downsample_graph = self.downsample_graph,
        transcript_clusters = self.transcript_clusters,
    )

    return (
        metrics = CLUSTER_GENOTYPES.metrics,
        metrics_json = CLUSTER_GENOTYPES.metrics_json,
        graph = CLUSTER_GENOTYPES.graph,
        calls = CLUSTER_GENOTYPES.calls,
    )
}

pipeline CALL_AND_CLUSTER(
    in bam bam,
    in string fasta,
    in int ploidy,
    in gtf gtf,
    in int alt_alleles_required,
    in int ref_alleles_required,
    in string input_variants,
    in csv reads_per_cell,
    in string ground_truth,
    in int downsample_graph,
    in csv transcript_clusters,
    out tsv calls,
)
{
    call CALL_VARIANTS(
        bam = self.bam,
        ploidy = self.ploidy,
        fasta = self.fasta,
        gtf = self.gtf,
        input_variants = self.input_variants,
    )

    call CLUSTER_GENOTYPES(
        vcfs = CALL_VARIANTS.vcfs,
        ploidy = self.ploidy,
        alt_alleles_required = self.alt_alleles_required,
        ref_alleles_required = self.ref_alleles_required,
        reads_per_cell = self.reads_per_cell,
        ground_truth = self.ground_truth,
        downsample_graph = self.downsample_graph,
        transcript_clusters = self.transcript_clusters,
    )

    return (
        calls = CLUSTER_GENOTYPES.calls,
    )
}




pipeline CELL_MUX(
    in bam bam,
    in string fasta,
    in csv cells,
    in int ploidy,
    in gtf gtf,
    in int alt_alleles_required,
    in int ref_alleles_required,
    in string ground_truth,
    in string input_variants,
    in int downsample_graph,
    in csv transcript_clusters,
    out tsv assignments,
)
{

    call REFORMAT_BAM(
        bam = self.bam,
        fasta = self.fasta,
        cells = self.cells,
    )

    call CALL_AND_CLUSTER(
        fasta = self.fasta,
        ploidy = self.ploidy,
        gtf = self.gtf,
        bam = REFORMAT_BAM.bam,
        reads_per_cell = REFORMAT_BAM.reads_per_cell,
        alt_alleles_required = self.alt_alleles_required,
        ref_alleles_required = self.ref_alleles_required,
        ground_truth = self.ground_truth,
        input_variants = self.input_variants,
        downsample_graph = self.downsample_graph,
        transcript_clusters = self.transcript_clusters,
    )

    return (
        assignments = CALL_AND_CLUSTER.calls,
    )
}

pipeline CELL_MUX_BWA(
    in bam bam,
    in string fasta,
    in csv cells,
    in int ploidy,
    in gtf gtf,
    in int alt_alleles_required,
    in int ref_alleles_required,
    in string ground_truth,
    in string input_variants,
    in int downsample_graph,
    in csv transcript_clusters,
    out tsv assignments,
)
{

    call REALIGN(
        bam = self.bam,
        fasta = self.fasta,
        cells = self.cells,
    )

    call CALL_AND_CLUSTER(
        fasta = self.fasta,
        ploidy = self.ploidy,
        gtf = self.gtf,
        bam = REALIGN.bam,
        reads_per_cell = REALIGN.reads_per_cell,
        alt_alleles_required = self.alt_alleles_required,
        ref_alleles_required = self.ref_alleles_required,
        ground_truth = self.ground_truth,
        input_variants = self.input_variants,
        downsample_graph = self.downsample_graph,
        transcript_clusters = self.transcript_clusters,
    )

    return (
        assignments = CALL_AND_CLUSTER.calls,
    )
}

