filetype png;
filetype mcl;
filetype bam;
filetype dot;
filetype tsv;
filetype tsv.gz;
filetype bed;
filetype bed.gz;
filetype txt;
filetype json;
filetype fa;
filetype vcf.gz;
filetype fasta;
filetype csv;
filetype gtf;
filetype sam;

stage REALIGN(
    in bam bam,
    in string fasta,
    in csv cells,
    in int max_intron_length,
    out bam bam,
    out csv read_groups,
    out csv reads_per_cell,
    src py "stages/realign",
) split using (
    in string chrom,
    in int start,
    in int end,
)

stage REFORMAT_BAM(
    in bam bam,
    in string fasta,
    in csv cells,
    out csv reads_per_cell,
    out sam header,
    out csv read_groups,
    out bam bam,
    out int no_cell_barcode,
    out int no_cell_call,
    out int unmapped,
    out int mapped,
    out int reads_total,
    src py "stages/cell_read_group",
) split using (
    in string chrom,
    in int start,
    in int end,
)

stage SPLIT_N_READS(
    in bam[] bams,
    in string fasta,
    in sam header,
    out bam bam,
    out csv reads_per_cell,
    src py "stages/split_n_reads",
) split using (
    in bam bam,
)

stage ANALYZE_SC_VARIANTS(
    in string fasta,
    in string gtf,
    in int near_exon_window,
    in tsv.gz sc_calls,
    in bam[] bam_files,
    in bam sc_bam,
    in string[] bam_names,
    in vcf.gz ground_truth,
    out csv analyze_sc_variants,
    src py "stages/analyze_sc_variants",
) split using (
    in string chrom,
    in int start,
    in int end,
)

stage CALL_VARIANTS(
    in bam bam,
    in string fasta,
    in int ploidy,
    in gtf gtf,
    in string input_variants,
    in bool call_exome_only,
    in int call_near_exon_window,
    in int min_mapq,
    out vcf.gz vcf,
    out vcf.gz[] vcfs,
    out bed bed,
    src py "stages/call_variants",
) split using (
    in string chrom,
    in int start,
    in int end,
)

stage CLUSTER_GENOTYPES(
    in vcf.gz[] vcfs,
    in int ploidy,
    in string fasta,
    in int ref_alleles_required,
    in int alt_alleles_required,
    in csv reads_per_cell,
    in string ground_truth,
    in int downsample_graph,
    in csv transcript_clusters,
    in int qual_filter,
    out map metrics,
    out json metrics_json,
    out dot graph,
    out tsv.gz calls,
    out mcl clusters,
    out png concordance_bargraph,
    out png concordance_heatmap,
    out csv concordance,
    out png pca_vs_clusters,
    out csv pca_vs_clusters_data,
    src py "stages/cluster_genotypes",
) split using (
    in vcf.gz vcf,
)

